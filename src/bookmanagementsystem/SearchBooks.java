/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bookmanagementsystem;
//importing the necessary classes
import java.awt.Color;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author Niranjan
 */
public class SearchBooks extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form SearchBooks
     */
    //global variables
    String bookID, bookName, authorName, price, category, genre, language, yearPublished, rating;
    double checker = 0.0;
    
    public SearchBooks() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Books in Library");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 0, 0));
        setBounds(new java.awt.Rectangle(400, 100, 0, 0));
        setUndecorated(true);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setBackground(new java.awt.Color(0, 0, 0));
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(51, 255, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "BookID", "BookName", "Author", "Price", "Category", "Genre", "LanguageAvailable", "Year", "Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setAutoscrolls(false);
        jTable1.setGridColor(new java.awt.Color(51, 255, 0));
        jTable1.setRowHeight(30);
        jTable1.setSelectionBackground(new java.awt.Color(0, 153, 153));
        jTable1.setShowGrid(true);
        jTable1.setShowHorizontalLines(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(180);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(180);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(6).setResizable(false);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setResizable(false);
            jTable1.getColumnModel().getColumn(8).setPreferredWidth(120);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 255, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Available Books");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 255, 0));
        jButton1.setText("Search");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 255, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sort By");

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Price", "Category", "Genre" }));
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboBox1MousePressed(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setForeground(new java.awt.Color(51, 255, 0));
        jRadioButton1.setText("Fiction");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 255, 0));
        jLabel3.setText("Category");

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setForeground(new java.awt.Color(51, 255, 0));
        jRadioButton2.setText("Non-Fiction");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jComboBox2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Mystery", "Adventure", "Thriller", "Comedy", "Drama" }));
        jComboBox2.setBorder(null);
        jComboBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboBox2MousePressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 255, 0));
        jLabel4.setText("Genre");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1)
                            .addComponent(jRadioButton1)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton2)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)))
                .addContainerGap())
        );

        jMenu1.setText("Help");

        jMenuItem1.setText("View Help");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("X");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenu2MouseExited(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //getters method
    private String getBook() {
        return bookID;
    }

    private String getBookName() {
        return bookName;
    }

    private String getAuthorName() {
        return authorName;
    }

    private String getBookPrice() {
        return price;
    }

    private String getCategory() {
        return category;
    }

    private String getGenre() {
        return genre;
    }

    private String getLanguage() {
        return language;
    }

    private String getRating() {
        return rating;
    }

    private String getYearPublished() {
        return yearPublished;
    }

    private String getSearchText() {
        String text = jTextField1.getText().trim();
        return text;
    }

    private String getSearchCategory() {
        String categories = "";
        if (jRadioButton1.isSelected()) {
            categories = jRadioButton1.getText();
        }
        if (jRadioButton2.isSelected()) {
            categories = jRadioButton2.getText();
        }
        return categories;
    }

    private String getSortElement() {
        String sortElement = " ";
        switch (jComboBox1.getSelectedIndex()) {
            case 1 ->
                sortElement = (String) jComboBox1.getSelectedItem();
            case 2 ->
                sortElement = (String) jComboBox1.getSelectedItem();
            case 3 ->
                sortElement = (String) jComboBox1.getSelectedItem();
            case 0 ->
                sortElement = (String) jComboBox1.getSelectedItem();
            default -> {
            }
        }
        return sortElement;
    }

    private String getSearchGenre() {
        String genres = " ";
        switch (jComboBox2.getSelectedIndex()) {
            case 1 ->
                genres = (String) jComboBox2.getSelectedItem();
            case 2 ->
                genres = (String) jComboBox2.getSelectedItem();
            case 3 ->
                genres = (String) jComboBox2.getSelectedItem();
            case 4 ->
                genres = (String) jComboBox2.getSelectedItem();
            case 0 ->
                genres = (String) jComboBox2.getSelectedItem();
            case 5 ->
                genres = (String) jComboBox2.getSelectedItem();
            default -> {
            }
        }
        return genres;
    }

    private String linearSearchGenre(String[] array) {
        String result = " ";
        for (String array1 : array) {
            if (array1.equals(getSearchGenre())) {
                result = getSearchGenre();
                break;
            }
        }
        return result;
    }

    private String linearSearchCategory(String[] array) {
        String result = " ";
        for (String array1 : array) {
            if (array1.equals(getSearchCategory())) {
                result = getSearchCategory();
                break;
            }
        }
        return result;
    }
    //BinarySearch
    private int binarySearch(double arr[], int left, int right, double x) {
        if (right >= left) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == x) {
                return mid;
            }

            if (arr[mid] > x) {
                return binarySearch(arr, left, mid - 1, x);
            }

            return binarySearch(arr, mid + 1, right, x);
        }

        return -1;
    }

    private void sortAndSearchElementsForAll() {
        //reads the file records.txt
        String fileName = "records.txt";
        File file = new File(fileName);
        String value;
        int columnCount = jTable1.getColumnCount();
        int rowCount = jTable1.getRowCount();
        int nextRow = 0;
        boolean empty = false;
        try {
            //gets the values from records as input
            Scanner input = new Scanner(file);
            while (input.hasNext()) {
                String data = input.next();
                //stores the value in array and splits them
                String[] values = data.split(",");
                //storing the respective values in variables
                bookID = values[0];
                bookName = values[1];
                authorName = values[2];
                price = values[3];
                category = values[4];
                genre = values[5];
                language = values[6];
                yearPublished = values[7];
                rating = values[8];
                //storing the respective values in arrays
                String records[] = {getBook(), getBookName(), getAuthorName(), getBookPrice(), getCategory(), getGenre(), getLanguage(), getYearPublished(), getRating()};
                //displaying the values in table
                do {
                    value = (String) jTable1.getValueAt(nextRow, 0);
                    if (value != null && value.length() != 0) {
                        nextRow++;
                    } else {
                        empty = true;
                    }
                } while (nextRow < rowCount && !empty);
                for (int i = 0; i < columnCount; i++) {
                    jTable1.setValueAt(records[i], nextRow, i);
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("zxcx");
        }
    }

    public void buttons() {
        jRadioButton1.setVisible(false);
        jRadioButton2.setVisible(false);
        jLabel3.setVisible(false);
        jLabel4.setVisible(false);
        jComboBox2.setVisible(false);
    }

    private String sortAndSearchCategory() {
        //reading the records.txt file
        String fileName = "records.txt";
        String result = "";
        File file = new File(fileName);
        int nextRow = 0;
        try {
            //taking the values from records.txt
            Scanner input = new Scanner(file);
            while (input.hasNext()) {
                String data = input.next();
                String[] values = data.split(",");
                category = values[4];
                nextRow++;
            }
            String categories[] = new String[nextRow];
            //reading the records the from the records.txt
            Scanner inputs = new Scanner(file);
            while (inputs.hasNext()) {
                for (int i = 0; i < nextRow; i++) {
                    String data = inputs.next();
                    String[] values = data.split(",");
                    category = values[4];
                    //storing the value in the array
                    categories[i] = getCategory();
                }
            }
            //making a call to linearSearchCategory and storing the value
            result = linearSearchCategory(categories);
        } catch (FileNotFoundException e) {
            System.out.println("zxcx");
        }
        return result;
    }

    private String sortAndSearchGenre() {
        String fileName = "records.txt";
        String result = "";
        File file = new File(fileName);
        int nextRow = 0;
        try {
            Scanner input = new Scanner(file);
            while (input.hasNext()) {
                String data = input.next();
                String[] values = data.split(",");
                genre = values[5];
                nextRow++;
            }
            String categories[] = new String[nextRow];
            Scanner inputs = new Scanner(file);
            while (inputs.hasNext()) {
                for (int i = 0; i < nextRow; i++) {
                    String data = inputs.next();
                    String[] values = data.split(",");
                    genre = values[5];
                    categories[i] = getGenre();
                }
            }
            result = linearSearchGenre(categories);
        } catch (FileNotFoundException e) {
            System.out.println("zxcx");
        }
        return result;
    }

    private int searchAndSortPrice() {
        //reads the file records.txt
        String fileName = "records.txt";
        int result = 0;
        File file = new File(fileName);
        int nextRow = 0;
        try {
            //takes the values as input from records.txt
            Scanner input = new Scanner(file);
            while (input.hasNext()) {
                String data = input.next();
                //splits the data and stores them in the form of arrays
                String[] values = data.split(",");
                price = values[3];
                nextRow++;
            }
            double prices[] = new double[nextRow];
            Scanner inputs = new Scanner(file);
            while (inputs.hasNext()) {
                for (int i = 0; i < nextRow; i++) {
                    String data = inputs.next();
                    String[] values = data.split(",");
                    price = values[3];
                    double enterPrice = Double.parseDouble(price);
                    prices[i] = enterPrice;
                }
            }
            //calls the method sort from merge sorter
            MergeSorter.sort(prices);
            try {
                //parsing of value from the textfield
                checker = Double.parseDouble(getSearchText());
                //makes a call to the binarySearchMethod
                result = binarySearch(prices, 0, nextRow - 1, checker);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter the decimal values i.e. 23");
            }
        } catch (FileNotFoundException e) {
            System.out.println("zxcx");
        }
        return result;
    }

    private void clearTable() {
        //clears table
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                jTable1.setValueAt("", i, j);
            }
        }
    }

    private void displaySearchGenre() {
        JOptionPane.showMessageDialog(null, "The list of books of genre " + getSearchGenre() + " are listed below in the table");
        String fileName = "records.txt";
        File file = new File(fileName);
        String value;
        int columnCount = jTable1.getColumnCount();
        int rowCount = jTable1.getRowCount();
        int nextRow = 0;
        boolean empty = false;
        try {
            Scanner input = new Scanner(file);
            while (input.hasNext()) {
                String data = input.next();
                String[] values = data.split(",");
                bookID = values[0];
                bookName = values[1];
                authorName = values[2];
                price = values[3];
                category = values[4];
                genre = values[5];
                language = values[6];
                yearPublished = values[7];
                rating = values[8];
                String records[] = {getBook(), getBookName(), getAuthorName(), getBookPrice(), getCategory(), getGenre(), getLanguage(), getYearPublished(), getRating()};
                if (genre.equals(getSearchGenre())) {
                    do {
                        value = (String) jTable1.getValueAt(nextRow, 0);
                        if (value != null && value.length() != 0) {
                            nextRow++;
                        } else {
                            empty = true;
                        }
                    } while (nextRow < rowCount && !empty);
                    for (int i = 0; i < columnCount; i++) {
                        jTable1.setValueAt(records[i], nextRow, i);
                    }
                }
            }

        } catch (FileNotFoundException e) {
            System.out.println("zxcx");
        }
    }

    private void displaySearchCategory() {
        //reads the records.txt file
        JOptionPane.showMessageDialog(null, "The list of books of category " + getSearchCategory() + " are listed below in the table");
        String fileName = "records.txt";
        File file = new File(fileName);
        String value;
        int columnCount = jTable1.getColumnCount();
        int rowCount = jTable1.getRowCount();
        int nextRow = 0;
        boolean empty = false;
        try {
            //takes the input from records.txt
            Scanner input = new Scanner(file);
            while (input.hasNext()) {
                String data = input.next();
                String[] values = data.split(",");
                //stores the respective values in variables
                bookID = values[0];
                bookName = values[1];
                authorName = values[2];
                price = values[3];
                category = values[4];
                genre = values[5];
                language = values[6];
                yearPublished = values[7];
                rating = values[8];
                //stores the values of variables in array 
                String records[] = {getBook(), getBookName(), getAuthorName(), getBookPrice(), getCategory(), getGenre(), getLanguage(), getYearPublished(), getRating()};
                //checks whether the category from search matches the records
                if (category.toLowerCase().equals(getSearchCategory().toLowerCase())) {
                    //displays the values of specific categories in the Table
                    do {
                        value = (String) jTable1.getValueAt(nextRow, 0);
                        if (value != null && value.length() != 0) {
                            nextRow++;
                        } else {
                            empty = true;
                        }
                    } while (nextRow < rowCount && !empty);
                    for (int i = 0; i < columnCount; i++) {
                        jTable1.setValueAt(records[i], nextRow, i);
                    }
                }
            }

        } catch (FileNotFoundException e) {
            System.out.println("zxcx");
        }
    }

    private void displaySearchPrice() {
        // reads the records.txt
        String fileName = "records.txt";
        File file = new File(fileName);
        String value;
        int columnCount = jTable1.getColumnCount();
        int rowCount = jTable1.getRowCount();
        int nextRow = 0;
        boolean empty = false;
        try {
            //takes the values from records.txt as input
            Scanner input = new Scanner(file);
            while (input.hasNext()) {
                String data = input.next();
                String[] values = data.split(",");
                //Stores the respective values in variables
                bookID = values[0];
                bookName = values[1];
                authorName = values[2];
                price = values[3];
                double storingPrice = Double.parseDouble(price);
                category = values[4];
                genre = values[5];
                language = values[6];
                yearPublished = values[7];
                rating = values[8];
                String records[] = {getBook(), getBookName(), getAuthorName(), getBookPrice(), getCategory(), getGenre(), getLanguage(), getYearPublished(), getRating()};
                //checks whether the input matches the reocrd or not
                if (storingPrice == checker) {
                    //displays the value in table of the price
                    do {
                        value = (String) jTable1.getValueAt(nextRow, 0);
                        if (value != null && value.length() != 0) {
                            nextRow++;
                        } else {
                            empty = true;
                        }
                    } while (nextRow < rowCount && !empty);
                    for (int i = 0; i < columnCount; i++) {
                        jTable1.setValueAt(records[i], nextRow, i);
                    }
                    JOptionPane.showMessageDialog(null, "BookName: " + bookName + "\n" + "Price: " + checker + "\n" + " Category: " + category + "\n" + " Genre:" + genre);
                    break;
                }
            }

        } catch (HeadlessException | FileNotFoundException | NumberFormatException e) {
            System.out.println("zxcx");
        }
    }

    public void sortAndSearchElements() {
        //checks which sorting category is selected
        if ("All".equals(getSortElement())) {
            //making a call to the method
            sortAndSearchElementsForAll();
        } else {
            if (null != getSortElement()) {
                switch (getSortElement()) {
                    //for category searching
                    case "Category" -> {
                        //checks whether the category is empty or not
                        if (!getSearchCategory().isEmpty()) {
                            //checks whetehr the category is present in record 
                            if (!sortAndSearchCategory().trim().isEmpty()) {
                                // makes a call to the method
                                displaySearchCategory();
                            } else {
                                JOptionPane.showMessageDialog(null, getSearchCategory() + " :CategoryNotFound" + "\n" + "Stock Unavailable");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Choose Fiction or Non-Fiction");
                        }
                    }
                    //for price searching
                    case "Price" -> {
                        //checks whether the text field is empty ot not
                        if (!getSearchText().trim().isEmpty()) {
                            //checks whether the price is present in the records or not
                            if (searchAndSortPrice() == -1) {
                                JOptionPane.showMessageDialog(null, getSearchText() + " :Price Elements Not Found");
                            } else {
                                //makes a call to the method
                                displaySearchPrice();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Input the required price");
                        }
                    }
                    //for genre searching
                    case "Genre" -> {
                        //checks whether the genre is selected 
                        if (!"Select".equals(getSearchGenre())) {
                            //checks the selected genre is present in records or not
                            if (!sortAndSearchGenre().trim().isEmpty()) {
                                displaySearchGenre();
                            } else {
                                JOptionPane.showMessageDialog(null, getSearchGenre() + " :GenreNotFound" + "\n" + "Stock Unavailable");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Choose Genre");
                        }
                    }
                    default -> {
                    }
                }
            }
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        sortAndSearchElements();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        //validating the textfield; let's only integer values
        char c = evt.getKeyChar();
        if (Character.isDigit(c) || evt.getKeyCode() == 8 || evt.getKeyCode() == 46) {
            String a = jTextField1.getText();
            if (evt.getKeyCode() == 46) {
                if (!(a.contains("."))) {
                    String number = a + ".";
                    jTextField1.setText(number);
                    jTextField1.setEditable(false);
                } else {
                    jTextField1.setEditable(false);
                }
            } else if (Character.isDigit(c) || evt.getKeyCode() == 8) {
                jTextField1.setEditable(true);
            }
        } else {
            jTextField1.setEditable(false);
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jComboBox1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1MousePressed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        switch (jComboBox1.getSelectedIndex()) {
            case 0 -> {
                jRadioButton1.setVisible(false);
                jRadioButton2.setVisible(false);
                jLabel3.setVisible(false);
                jLabel4.setVisible(false);
                jComboBox2.setVisible(false);
                jTextField1.setText(" ");
                jTextField1.setEditable(false);
            }
            case 1 -> {
                jRadioButton1.setVisible(false);
                jRadioButton2.setVisible(false);
                jLabel3.setVisible(false);
                jLabel4.setVisible(false);
                jComboBox2.setVisible(false);
                jTextField1.setEditable(true);
            }
            case 2 -> {
                jRadioButton1.setVisible(true);
                jRadioButton2.setVisible(true);
                jLabel3.setVisible(true);
                jLabel4.setVisible(false);
                jComboBox2.setVisible(false);
                jTextField1.setText(" ");
                jTextField1.setEditable(false);
            }
            case 3 -> {
                jRadioButton1.setVisible(false);
                jRadioButton2.setVisible(false);
                jLabel3.setVisible(false);
                jLabel4.setVisible(true);
                jComboBox2.setVisible(true);
                jTextField1.setText(" ");
                jTextField1.setEditable(false);
            }
            default -> {
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2MousePressed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // reads the searchHelp.txt and displays it
        try {
            File file = new File("SearchHelp.txt");
            file.setReadOnly();
            Desktop desktop = Desktop.getDesktop();
            if (file.exists()) {
                desktop.open(file);
            }
        } catch (IOException e) {
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:
        clearTable();
    }//GEN-LAST:event_jButton1MousePressed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        dispose();
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseEntered
        jMenu2.setForeground(Color.red);
    }//GEN-LAST:event_jMenu2MouseEntered

    private void jMenu2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseExited
        jMenu2.setForeground(Color.BLACK);
    }//GEN-LAST:event_jMenu2MouseExited

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
